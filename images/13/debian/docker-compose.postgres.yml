version: "2.3"

services:
  # https://docs.docker.com/docker-hub/builds/automated-testing/
  sut:
    build:
      context: ./test
      dockerfile: Dockerfile
    command: sh /docker_test.sh
    # Only for travis-ci, do not name test container in dockerhub
    container_name: sut
    depends_on:
      - erpnext_db
      - erpnext_app
      - erpnext_web
      - erpnext_scheduler
      - erpnext_worker_default
      - erpnext_worker_long
      - erpnext_worker_short
      - erpnext_socketio
      - erpnext_redis_cache
      - erpnext_redis_queue
      - erpnext_redis_socketio
    environment:
      # Container setup
      - NODE_TYPE=sut
      # Docker setup
      - DOCKER_APPS_TIMEOUT=900
      - DOCKER_DEBUG=1
    volumes_from:
      - erpnext_app
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  erpnext_app:
    # For development or CI, build from local Dockerfile
    build: ./
    # For production, download prebuilt image
    #image: monogramm/docker-erpnext:13-debian 
    container_name: erpnext_app
    command: app
    #restart: always
    ports:
      - 8000:8000
    depends_on:
      - erpnext_db
    links:
      - erpnext_db
    environment:
      # Docker setup
      - DOCKER_GUNICORN_TIMEOUT=600
      # Frappe setup
      - FRAPPE_APP_INIT=erpnext
      - FRAPPE_APP_RESET=1
      - FRAPPE_DEFAULT_PROTOCOL=http://
      - FRAPPE_DEFAULT_SITE=${ERPNEXT_SITE}
      - FRAPPE_SOCKETIO_PORT=3000
      - FRAPPE_LOGGING=1
      - DEVELOPER_MODE=0
      - ALLOW_TESTS=1
      #- ADMIN_USER=Administrator
      - ADMIN_PASSWORD=${ERPNEXT_ADMIN_PWD}
      - ENCRYPTION_KEY=${ERPNEXT_ENCRYPTION_KEY}
      # Database setup
      - DB_TYPE=postgres
      - DB_HOST=erpnext_db
      - DB_PORT=5432
      - DB_NAME=${ERPNEXT_DB_NAME}
      - DB_PASSWORD=${ERPNEXT_DB_PWD}
      - DB_ROOT_LOGIN=${ERPNEXT_DB_ROOT_LOGIN}
      - DB_ROOT_PASSWORD=${ERPNEXT_DB_ROOT_PWD}
      # Mail setup
      - MAIL_MUTED=true
      - MAIL_HOST=${ERPNEXT_MAIL_HOST}
      - MAIL_PORT=587
      - MAIL_USE_SSL=tls
      - MAIL_LOGIN=${ERPNEXT_SMTP_USER}
      - MAIL_PASSWORD=${ERPNEXT_SMTP_PWD}
      # Redis setup
      - REDIS_CACHE_HOST=erpnext_redis_cache
      - REDIS_QUEUE_HOST=erpnext_redis_queue
      - REDIS_SOCKETIO_HOST=erpnext_redis_socketio
    volumes:
      - /srv/erpnext/frappe/sites:/home/frappe/frappe-bench/sites
      - /srv/erpnext/frappe/logs:/home/frappe/frappe-bench/logs
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  erpnext_web:
    image: nginx:alpine
    container_name: erpnext_web
    #restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # If you need SSL connection, you can provide your own certificates
      # - ./certs:/etc/letsencrypt
      # - ./certs-data:/data/letsencrypt
    volumes_from:
      - erpnext_app
    ports:
      - 80:80
      # If you need SSL connection
      # - '443:443'
    links:
      - erpnext_app
      - erpnext_socketio

  erpnext_db:
    image: postgres:10-alpine
    container_name: erpnext_db
    #restart: always
    stdin_open: true
    tty: true
    command: postgres -c 'max_connections=500'
    environment:
      - POSTGRES_USER=${ERPNEXT_DB_ROOT_LOGIN}
      - POSTGRES_PASSWORD=${ERPNEXT_DB_ROOT_PWD}
    volumes:
      - /srv/erpnext/db/data:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  erpnext_scheduler:
    # For development or CI, build from local Dockerfile
    build: ./
    # For production, download prebuilt image
    #image: monogramm/docker-erpnext:13-debian 
    container_name: erpnext_scheduler
    #restart: always
    depends_on:
      - erpnext_app
    environment:
      - NODE_TYPE=scheduler
      # Docker setup
      - DOCKER_APPS_TIMEOUT=900
    volumes_from:
      - erpnext_app
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  erpnext_worker_default:
    # For development or CI, build from local Dockerfile
    build: ./
    # For production, download prebuilt image
    #image: monogramm/docker-erpnext:13-debian 
    container_name: erpnext_worker_default
    #restart: always
    depends_on:
      - erpnext_app
    environment:
      - NODE_TYPE=worker-default
      # Docker setup
      - DOCKER_APPS_TIMEOUT=900
    volumes_from:
      - erpnext_app
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  erpnext_worker_long:
    # For development or CI, build from local Dockerfile
    build: ./
    # For production, download prebuilt image
    #image: monogramm/docker-erpnext:13-debian 
    container_name: erpnext_worker_long
    #restart: always
    depends_on:
      - erpnext_app
    environment:
      - NODE_TYPE=worker-long
      # Docker setup
      - DOCKER_APPS_TIMEOUT=900
    volumes_from:
      - erpnext_app
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  erpnext_worker_short:
    # For development or CI, build from local Dockerfile
    build: ./
    # For production, download prebuilt image
    #image: monogramm/docker-erpnext:13-debian 
    container_name: erpnext_worker_short
    #restart: always
    depends_on:
      - erpnext_app
    environment:
      - NODE_TYPE=worker-short
      # Docker setup
      - DOCKER_APPS_TIMEOUT=900
    volumes_from:
      - erpnext_app
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  erpnext_socketio:
    # For development or CI, build from local Dockerfile
    build: ./
    # For production, download prebuilt image
    #image: monogramm/docker-erpnext:13-debian 
    container_name: erpnext_socketio
    #restart: always
    ports:
      - 3000:3000
    depends_on:
      - erpnext_app
    environment:
      - NODE_TYPE=node-socketio
      # Docker setup
      - DOCKER_APPS_TIMEOUT=900
    volumes_from:
      - erpnext_app
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  erpnext_redis_cache:
    image: redis:alpine
    container_name: erpnext_redis_cache
    command: ["redis-server","/etc/conf.d/redis.conf"]
    #restart: always
    volumes:
      - ./services/erpnext/conf/redis_cache.conf:/etc/conf.d/redis.conf:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  erpnext_redis_queue:
    image: redis:alpine
    container_name: erpnext_redis_queue
    #restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  erpnext_redis_socketio:
    image: redis:alpine
    container_name: erpnext_redis_socketio
    #restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
